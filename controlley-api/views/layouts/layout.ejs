<!DOCTYPE html>
<html>
  <head>
    <title>Title</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/dependencies/bootstrap-reboot.min.css">
    <link rel="stylesheet" href="/dependencies/bootstrap.min.css">
    <link rel="stylesheet" href="/dependencies/bootstrap-grid.min.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->
  </head>

  <body>
  <nav class="navbar navbar-expand-md navbar-dark bg-dark">
    <a class="navbar-brand" href="#">
      <img src="/assets/brand/bootstrap-solid.svg" width="30" height="30" class="d-inline-block align-top" alt="">
      Controlley
    </a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNavDropdown" aria-controls="navbarNavDropdown" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarNavDropdown">
      <ul class="navbar-nav">
        <li class="nav-item active">
          <a class="nav-link" href="#">Sobre Controlley<span class="sr-only"></span></a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="#">Productos y Servicios</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="#">Mapa Público</a>
        </li>
      </ul>
      <ul class="nav nav-pills ml-auto" id="promptControls">
        <li class="nav-item dropdown">
          <a class="nav-link dropdown-toggle" href="#" id="navbarDropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Nombre de Compañía</a>
          <div class="dropdown-menu" aria-labelledby="navbarDropdownMenuLink">
            <strong class="dropdown-header">Administrar</strong>
            <a class="dropdown-item" href="#">Conductores</a>
            <a class="dropdown-item" href="#">Paradas</a>
            <a class="dropdown-item" href="#">Rutas</a>
            <a class="dropdown-item" href="#">Vehículos</a>
          </div>
        </li>
        <li class="nav-item dropdown">
          <a class="nav-link dropdown-toggle" href="#" id="navbarDropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Compañías</a>
          <div class="dropdown-menu" aria-labelledby="navbarDropdownMenuLink">
            <a class="dropdown-item" href="#">Lista de compañías a las que pertenece</a>
            <div class="dropdown-divider"></div>
            <a class="dropdown-item" href="#">Unirse a compañía</a>
            <a class="dropdown-item" href="#">Crear compañía</a>
          </div>
        </li>
        <li class="nav-item dropdown">
          <a class="nav-link dropdown-toggle" href="#" id="navbarDropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Username</a>
          <div class="dropdown-menu" aria-labelledby="navbarDropdownMenuLink">
            <a class="dropdown-item" href="#">Estadísticas del conductor</a>
            <div class="dropdown-divider"></div>
            <a class="dropdown-item" href="#">Configuración</a>
          </div>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="#">Registrarse</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="#">Entrar</a>
        </li>
      </ul>
    </div>
  </nav>

  <div class="container-fluid">

    <% if (flash && flash.err) { %>
    <ul class="alert alert-info col-sm-8 col-md-6 mx-auto">
      <div><%= flash.err["name"]; %>: <%= flash.err["details"]; %></div>
      <span class="float-right clearfix small">Code: <%= flash.err["code"]; %></span>
    </ul>
    <% } %>

    <%- body %>

    <!--<footer class="footer row bg-dark">-->
      <!--<hr>-->
      <!--<div class="col-11 mx-auto">-->
        <!--&copy; Imaginary Sense LLC-->
      <!--</div>-->
    <!--</footer>-->
  </div>

    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like React, Vue.js, Angular, Ember, and Backbone
        require that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different view engine (handlebars, dust, pug/jade, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--
        Server-side View Locals
        ========================

        Sometimes, it's convenient to get access to your server-side view locals from
        client-side JavaScript.  This can improve page load times, remove the need for
        extra AJAX requests, and make your client-side code easier to understand and
        to maintain.  Sails provides a simple mechanism for accessing dynamic view
        locals: the "exposeLocalsToBrowser()" view partial.

        For more information on using this built-in feature, see:
        https://sailsjs.com/docs/concepts/views/locals#?escaping-untrusted-data-using-exposelocalstobrowser

    -->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/dependencies/sails.io.js"></script>
    <script src="/dependencies/jquery.slim.min.js"></script>
    <script src="/dependencies/popper.min.js"></script>
    <script src="/dependencies/bootstrap.min.js"></script>
    <script src="/dependencies/vue.min.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
